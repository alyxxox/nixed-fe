#!/usr/bin/env python3

import subprocess
import argparse
import threading
import time

parser = argparse.ArgumentParser(description='Pyrex4 System Manager. Built with the intention of simplifying package distribution via declarative initialisation of nix, pacman, flatpak in one function.',)
parser.add_argument('-i', '--install', dest='install', action='store_true', help='Install packages')
parser.add_argument('-t', '--trash', dest='remove', action='store_true', help='Remove packages')
parser.add_argument('-o', '--overhaul', dest='update', action='store_true', help='Update system')
parser.add_argument('-f', '--find', dest='find', action='store_true', help='Find packages')
#parser.add_argument('--verbose', dest='verbose', action='store_true', help='Require user confirmation before any command is processed. (Currently only implemented with AUR)')
#parser.add_argument('-fs', '--from-scratch', dest='source', action='store_true', help='Build and install package from source (Nix only for now)')
parser.add_argument('-sh', '--shell', dest='shell', action='store_true', help='Install package in non-persistent shell environment. (Does not support Flatpak)')
parser.add_argument('-r', '--run', dest='run', action='store_true')
parser.add_argument('-gd', '--garbage-disposal', dest='collectGarbage', action='store_true', help='Collect unused packages/paths (Nix function)')
parser.add_argument('-cc', '--compact', dest='compactor', action='store_true', help='Consolidate shared dependencies to save storage and optimize file paths at the expense of less reproducibility. (Set to False per install by default)')
parser.add_argument('-v', '--version', dest='version', action='store_true', help='Show version number')
parser.add_argument('--debug-parser', dest='debug', action='store_true', help="Prints the raw output of the input parser. For debugging purposes and shouldn't be included in final release")
parser.add_argument(dest='package', action='append', nargs='?', help='must be the last argument presented')
args = parser.parse_args()
class CliParser:
    def __init__(self, package):
        self.package = package
    def clean_input(self):
        cleaned_input = str(self.package).strip('[]\'')
        return cleaned_input
cli_parser = CliParser(args.package)
specin = cli_parser.clean_input()
## define package value depending on chosen package manager
repo = 'none'
if 'aur:' in specin:
    repo = 'arch'
    package = specin.replace('aur:', '')
    install_cmd = ['yay', '-S', '{}'.format(package)]
    remove_cmd = ['yay', '-R', '{}'.format(package), '--noconfirm']
    update_cmd = ['yay', '--noconfirm']
    find_cmd = ['yay', '-Ss', '{}'.format(package)]
elif 'nix:' in specin:
    repo = 'nix'
    package = specin.replace('nix:', '')
    install_cmd = ['nix-env', '-iA', '--log-format', 'bar-with-logs', '{}'.format(package)]
    remove_cmd = ['nix-env', '-e', '--log-format', 'bar-with-logs', '{}'.format(package)]
    nix_channelUpdate_cmd = ['nix-channel', '--update', '--log-format', 'bar-with-logs']
    nix_envUpdate_cmd = ['nix-env', '--upgrade', '--log-format', 'bar-with-logs']
    nix_channelUpdate_root = ['sudo', 'nix-channel', '--update', '--log-format', 'bar-with-logs']
    nix_envUpdate_root = ['sudo', 'nix-env', '--upgrade', '--log-format', 'bar-with-logs']
    find_cmd = ['firefox', '--private-window', 'https://search.nixos.org/packages?type=packages&query={}'.format(package)]
elif 'flatpak:' in specin:
    repo = 'flatpak'
    package = specin.replace('flatpak:', '')
    install_cmd = ['flatpak', 'install', '{}'.format(package)]
    remove_cmd = ['flatpak', 'remove', '{}'.format(package)]
    update_cmd = ['flatpak', 'update', '-y']
    find_cmd = ['flatpak', 'search', '{}'.format(package)]
elif 'apt:' in specin:
    repo = 'debian'
    package = specin.replace('apt:', '')
    container = 'debian-template'
    install_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'apt', 'install', '{}'.format(package)]
    remove_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'apt', 'remove', '{}'.format(package)]
    update_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'apt', 'update &&', 'sudo', 'apt', 'upgrade']
    find_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'apt', 'search', '{}'.format(package)]
elif 'dnf:' in specin:
    repo = 'fedora'
    package = specin.replace('dnf:', '')
    container = 'fedora-template'
    install_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'dnf', 'install', '{}'.format(package)]
    remove_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'dnf', 'remove', '{}'.format(package)]
    update_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'dnf', 'update']
    find_cmd = ['distrobox', 'enter', '{}'.format(container), '-r', '-e', 'sudo', 'dnf', 'search', '{}'.format(package)]
def stopBox():
    subprocess.Popen(['distrobox', 'stop', '-Y', '-r', '{}'.format(container)])
def nixUpdate():
    subprocess.call(nix_channelUpdate_cmd)
    subprocess.call(nix_envUpdate_cmd)
    subprocess.call(nix_channelUpdate_root)
    subprocess.call(nix_envUpdate_root)
def install():
    install_proc = subprocess.call(install_cmd)
def remove():
    remove_proc = subprocess.call(remove_cmd)
def update():
    if repo == 'nix':
        nixUpdate()
    elif repo == 'none':
        aurUpdate_proc = subprocess.call(['yay', '--noconfirm'])
        nixUpdate()
        flatpakUpdate_proc = subprocess.call(['flatpak', 'update', '-y'])
    else:
        update_proc = subprocess.call(update_cmd)
def find():
    find_proc = subprocess.call(find_cmd)

if args.find == True:
    if repo == 'debian' or 'fedora':
        find()
        stopBox()
    else:
        find()
    exit()
subprocess.call(['sudo', 'echo', 'Changing user privileges ->'])
if args.install == True:
    if repo == 'debian' or 'fedora':
        install()
        stopBox()
        exit()
    else:
        install()
        exit()
elif args.remove == True:
    if repo == 'debian' or 'fedora':
        remove()
        stopBox()
    else:
        remove()
    exit()
elif args.update == True:
    if repo == 'debian' or 'fedora':
        update()
        stopBox()
    else:
        update()
    exit()